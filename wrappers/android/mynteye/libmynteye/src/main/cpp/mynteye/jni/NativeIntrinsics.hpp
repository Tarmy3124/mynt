// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from mynteye_types.djinni

#pragma once

#include "djinni_support.hpp"
#include "intrinsics.hpp"

namespace djinni_generated {

class NativeIntrinsics final {
public:
    using CppType = ::mynteye_jni::Intrinsics;
    using JniType = jobject;

    using Boxed = NativeIntrinsics;

    ~NativeIntrinsics();

    static CppType toCpp(JNIEnv* jniEnv, JniType j);
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c);

private:
    NativeIntrinsics();
    friend ::djinni::JniClass<NativeIntrinsics>;

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("com/slightech/mynteye/Intrinsics") };
    const jmethodID jconstructor { ::djinni::jniGetMethodID(clazz.get(), "<init>", "(Lcom/slightech/mynteye/CalibrationModel;IIDDDDLjava/util/ArrayList;)V") };
    const jfieldID field_mCalibModel { ::djinni::jniGetFieldID(clazz.get(), "mCalibModel", "Lcom/slightech/mynteye/CalibrationModel;") };
    const jfieldID field_mWidth { ::djinni::jniGetFieldID(clazz.get(), "mWidth", "I") };
    const jfieldID field_mHeight { ::djinni::jniGetFieldID(clazz.get(), "mHeight", "I") };
    const jfieldID field_mFx { ::djinni::jniGetFieldID(clazz.get(), "mFx", "D") };
    const jfieldID field_mFy { ::djinni::jniGetFieldID(clazz.get(), "mFy", "D") };
    const jfieldID field_mCx { ::djinni::jniGetFieldID(clazz.get(), "mCx", "D") };
    const jfieldID field_mCy { ::djinni::jniGetFieldID(clazz.get(), "mCy", "D") };
    const jfieldID field_mCoeffs { ::djinni::jniGetFieldID(clazz.get(), "mCoeffs", "Ljava/util/ArrayList;") };
};

}  // namespace djinni_generated
